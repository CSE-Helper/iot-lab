---------------------------

1.LED ON OFF

const int ledPin = 13;
void setup() {
pinMode(ledPin, OUTPUT);    
}
void loop() {
digitalWrite(ledPin, HIGH);
delay(1000);
digitalWrite(ledPin, LOW);
delay(1000);           
}

---------------------------

2. LED SERIAL MOINITOR

const int redPin = 8;
const int greenPin = 9;
const int bluePin = 10;
void setup() {
pinMode(redPin, OUTPUT);
pinMode(greenPin, OUTPUT);
pinMode (bluePin, OUTPUT);
Serial.begin(9600);
Serial.println("type R RED ON, G GREEN ON, B BLUE ON, O ALL is ON, X ALL 18 OFF");
Serial.print("choose the letter: ");
  }
void loop() {
if (Serial.available() > 0) {
char comdata = char (Serial.read());
if (comdata == 'R') (
Serial.println("Red LED is ON");
digitalWrite(redPin, HIGH);
else if (condata == 'G') {
Serial.println("Green LED is ON");
digitalWrite(greenPin, HIGH);
else if (condata == 'B'){
Serial.println("Blue LED is ON");
digitalWrite(bluePin, HIGH);
}
else if (comdata == 'O') {

Serial.println("all LED is turn ON");
digitalWrite(redPin, HIGH);
digitalWrite(greenPin, HIGH);
digitalWrite(bluePin, HIGH);
}
else if (comdata == 'X') {
Serial.println("all LED is turn OFF");
digitalWrite(redPin, LOW);
digitalWrite(greenPin, LOW);
digitalWrite(blue Pin, LOW);
}
}
}

---------------------------

3.LED Rasperry pi 

import RPi.GPIO as GPIO
import time
led_array = [ 11, 12, 13, 15, 16, 18, 22, 7];
blink_delay = 0.5
try:
GPIO.setmode(GPIO.BOARD)
for i in range(0,8):
GPIO.setup(led_array[i], GPIO.OUT)
GPIO.output(led_array[i], False)
# Infinite Loop
while (True):
for i in range(0, 8):
GPIO.output(led_array[i], True)
print led_array[i], 'pin On'
time.sleep(blink_delay)
GPIO.output(led_array[i], False)
print led_array[i], 'pin Off'
time.sleep(blink_delay)
except KeyboardInterrupt:
print "Exiting Program"
except:
print "Error Occurs, Exiting Program"
finally:
GPIO.cleanup()

---------------------------

4. PIR ARDUINO

const int pirSensorPin = 2; 
const int buzzerPin = 3;    
void setup() {
  pinMode(pirSensorPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  Serial.begin(9600);       }
void loop() {
  int pirState = digitalRead(pirSensorPin);
  if (pirState == HIGH) {
    digitalWrite(buzzerPin, HIGH);
    Serial.println("Motion detected!");
    delay(2000); 
    digitalWrite(buzzerPin, LOW);
  } else {
    digitalWrite(buzzerPin, LOW);   }
  delay(500);     }

---------------------------

5.PIR Rasperry pi

import RPi.GPIO as GPIO
import time
sensor = 16
buzzer = 18
GPIO.setmode(GPIO.BOARD)
GPIO.setup(sensor,GPIO.IN)
GPIO.setup(buzzer,GPIO.OUT)
GPIO.output(buzzer,False)
print "Initialzing PIR Sensor......"
time.sleep(12)
print "PIR Ready..."
print " "
try: 
while True:
if GPIO.input(sensor):
GPIO.output(buzzer,True)
print "Motion Detected"
while GPIO.input(sensor):
time.sleep(0.2)
else:
GPIO.output(buzzer,False)
except KeyboardInterrupt:
GPIO.cleanup()

---------------------------

6.IR Sensor

const int irSensorPin = 2;
const int buzzerPin = 3;
void setup() {
  pinMode(irSensorPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  Serial.begin(9600);      
}
void loop() {
  int irValue = digitalRead(irSensorPin);
  if (irValue == HIGH) {
    Serial.println("Object detected!");
    digitalWrite(buzzerPin, HIGH);
    delay(1000); 
    digitalWrite(buzzerPin, LOW);
  } else {
    Serial.println("No object detected.");
  }
  delay(500);  
}

---------------------------

7.IR Rpi

import RPi.GPIO as GPIO
import time

# declare the sensor and led pin
sensor_pin = 23
led_pin = 26

# GPIO setup
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(sensor_pin, GPIO.IN)
GPIO.setup(led_pin, GPIO.OUT)
try:
while True:
if GPIO.input(sensor_pin):
# If no object is near
GPIO.output(led_pin, False)
while GPIO.input(sensor_pin):
time.sleep(0.2)
else:
# If an object is detected
GPIO.output(led_pin, True)
except KeyboardInterrupt:
GPIO.cleanup()

---------------------------

8.SOIL MOISTURE SENSOR

const int moistureSensorPin = A0; 
const int buzzerPin = 3;          
const int dryThreshold = 300;      
const int wetThreshold = 700;   
void setup() {
  pinMode(moistureSensorPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  Serial.begin(9600);    }
void loop() {
  int moistureValue = analogRead(moistureSensorPin);
  Serial.print("Moisture Value: ");
  Serial.println(moistureValue);
  if (moistureValue < dryThreshold) {
    digitalWrite(buzzerPin, HIGH);
    Serial.println("Soil is too dry!");
  } else if (moistureValue > wetThreshold) {
    digitalWrite(buzzerPin, HIGH);
    Serial.println("Soil is too wet!");
  } else {
    digitalWrite(buzzerPin, LOW);
    Serial.println("Soil moisture is within the acceptable range.");
  }
  delay(1000);       } 

---------------------------

9.Soil moisture sensor with raspberry pi

import RP1.GPIO as GPIO
import time
#GPIO SETUP
channel = 21
GPIO.setmode (GPIO.BCM)
GPIO.setup (channel, GPIO.IN)
def callback (channel):
if GPIO. input (channel):
print("no moisture content")
else:
value = GPIO.Read(channel)
print("Moisture observed!!!")
print(" Moisture Value :", value)
if(value > 700):
print(" Too much water")
else:
print(" I feel comfortable")
GPIO.add_event_detect (channel, GPIO.BOTH, bounceti-300) let u
GPIO.add_event_callback (channel, callback) assign function to
#infinite loop
while True:
time.sleep(1)

---------------------------

10.ULTRASONIC
const int trigPin = 2;  
const int echoPin = 3; 
void setup() {
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);    }
void loop() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH);
  int distance = duration * 0.0343 / 2;
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  delay(1000);     }

---------------------------

11. ULTRASONIC Rpi

import RPi.GPIO as GPIO
import time GPIO.setmode(GPIO.BCM)
GPIO_TRIG = 11
GPIO_ECHO = 18
GPIO.setup(GPIO_TRIG, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
GPIO.output(GPIO_TRIG, GPIO.LOW)
Time.sleep(2)
GPIO.output(GPIO_TRIG, GPIO.HIGH)
Time.sleep(0.00001)
GPIO.output(GPIO_TRIG, GPIO.LOW)
while GPIO.input(GPIO_ECHO)==0:
start_time = time.time()
while GPIO.input(GPIO_ECHO)==1:
Bounce_back_time = time.time()
pulse_duration = Bounce_back_time - start_time distance = round(pulse_duration *
17150, 2)
print (" Distance:",distance)
GPIO.cleanup()

---------------------------

12. SMOKE SENSOR

const int smokeSensorPin = A0; 
void setup() {
  Serial.begin(9600);     }
void loop() {
  int smokeValue = analogRead(smokeSensorPin);
  Serial.print("Smoke Sensor Value: ");
  Serial.println(smokeValue);
  delay(1000);       }

---------------------------

13.Smoke Sensor Rpi

import time
import botbook_mcp3002 as mcp

smokeLevel= 0

def readSmokeLevel():
global smokeLevel
smokeLevel= mcp.readAnalog()

def main():
while True:
readSmokeLevel()
if smokeLevel > 120:
print("Smoke detected")
print(" Smoke value: ",smokeLevel)
time.sleep(0.5)

if_name_=="_main_":
main()

---------------------------

14.TEMPERATURE MOISTURING

#include <DHT.h>
const int dhtPin = 2;  
DHT dht(dhtPin, DHT22);
void setup() {
  Serial.begin(9600);
  dht.begin();     }
void loop() {
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" °C");
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");
  delay(2000);      }

---------------------------

15.TEMPERATURE MOISTURING Rpi

import Adafruit_DHT
import time

DHT_SENSOR = Adafruit_DHT.DHT11
DHT_PIN = 4

while True:
temperature = Adafruit_DHT.read(DHT_SENSOR, DHT_PIN)
if temperature is not None:
print("Temprature = ".format(temperature, humidity))
else:
print("Sensor failure. Check wiring.");
time.sleep(3);

---------------------------

16.BLUETOOTH
#include <DHT.h>
const int dhtPin = 2; 
DHT dht(dhtPin, DHT22);
void setup() {
  Serial.begin(9600);
  dht.begin();     } 
void loop() {
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" °C");
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");
  delay(2000); }

---------------------------

17.Bluetooth Rpi

import serial
import RPi.GPIO as GPIO
import os, time
led1=17, led2=27
led3=22
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(led1, GPIO.OUT)
GPIO.setup(led2, GPIO.OUT)
GPIO.setup(led3, GPIO.OUT)
GPIO.output(led1 , 0)
GPIO.output(led2 , 0)
GPIO.output(led3 , 0)
Serial = serial.Serial("/dev/ttyS0", baudrate=9600, timeout=2)
data1=""
data=''”
while 1:
while data != '#':
data = Serial.read(1)
data1+=data
print data1
if data1.find("blue light on")>0:
GPIO.output(led1 , 1)
print "Blue Light on"
if data1.find("blue light off")>0:
GPIO.output(led1 , 0)
print "Blue Light Off"
if data1.find("red light on")>0:
GPIO.output(led2 , 1)
print "Red Light on"
if data1.find("red light off")>0:
GPIO.output(led2 , 0)
print "red Light Off"
if data1.find("green light on")>0:
GPIO.output(led3 , 1)
print "Green Light on"
if data1.find("green light off")>0:
GPIO.output(led3 , 0)
print "Green Light Off"
if data1.find("all lights on")>0:
GPIO.output(led1 , 1)
GPIO.output(led2 , 1)
GPIO.output(led3 , 1)
print "All Lights on"
if data1.find("all lights off")>0:
GPIO.output(led1 , 0)
GPIO.output(led2 , 0)
GPIO.output(led3 , 0)
print "All Light Off"
if data1.find("blink")>0:
for k in range (100):
GPIO.output(led1 , 1)
GPIO.output(led2 , 1)
GPIO.output(led3 , 1)
time.sleep(0.1)

GPIO.output(led1 , 0)
GPIO.output(led2 , 0)
GPIO.output(led3 , 0)
time.sleep(0.1)
Serial.flush();
data="";
data1="";

---------------------------

18.RELAY SWITCH

const int relayPin = 2;  
void setup() {
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);  }
void loop() {
  digitalWrite(relayPin, HIGH);
  delay(2000);
  digitalWrite(relayPin, LOW);
  delay(2000);  }

---------------------------

19.Relay rpi

import time
import RPi.GPIO as GPIO
relay_ch = 26
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(relay_ch, GPIO.OUT)
GPIO.output(relay_ch, GPIO.LOW)
time.sleep(1)
GPIO.output(relay_ch, GPIO.HIGH)
GPIO.cleanup()

---------------------------

20. Sensor data arduino

#include <SoftwareSerial.h>
#define RX 2
#define TX 3
#include "DHT.h"
#define DHTPIN 6
#define DHTTYPE DHT22

DHT dht(DHTPIN, DHTTYPE);

String AP = "AndroidAP_7822";
String PASS = "485088c2825f";
String API = "DRMINLS2DN88G1EZ";
String HOST = "api.thingspeak.com";
String PORT = "80";
String field1 = "field1";
String field2 = "field2";
int countTrueCommand;
int countTimeCommand;
boolean found = false;
float TempSensor = 1;
float HumidSensor = 1;
SoftwareSerial esp8266(RX,TX);

void setup() {
Serial.begin(9600);

esp8266.begin(9600);
dht.begin();
delay(1000);
sendCommand("AT",5,"OK");
sendCommand("AT+CWMODE=1",5,"OK");
sendCommand("AT+CWJAP=\""+ AP +"\",\""+ PASS +"\"",20,"OK");
}

void loop() {
TempSensor = getTempData();
HumidSensor = getHumidData();
String getData = "GET /update?api_key="+ API +"&"+ field1 +"="+String(TempSensor)+"&"+
field2 +"="+String(HumidSensor);
sendCommand("AT+CIPMUX=1",5,"OK");
sendCommand("AT+CIPSTART=0,\"TCP\",
}
\""+ HOST +"\","+ PORT,15,"OK");
sendCommand("AT+CIPSEND=0," +String(getData.length()+4),4,">");
esp8266.println(getData);delay(1500);countTrueCommand++;
sendCommand("AT+CIPCLOSE=0",5,"OK");
}

float getTempData(){
delay(2000);
float t = dht.readTemperature();
if (isnan(t)) {
Serial.println("Failed to read from DHT sensor!");
return 0;
}
return t;
}
float getHumidData(){

delay(2000);
float h = dht.readHumidity();
if (isnan(h)) {
Serial.println("Failed to read from DHT sensor!");
return 0;
}
return h;
}
void sendCommand(String command, int maxTime, char readReplay[]) {
Serial.print(countTrueCommand);
Serial.print(". at command => ");
Serial.print(command);
Serial.print(" ");
while(countTimeCommand < (maxTime*1))
{
esp8266.println(command);//at+cipsend
if(esp8266.find(readReplay))//ok
{
found = true;
break;
}

countTimeCommand++;
}

if(found == true)
{
Serial.println("OK");

countTrueCommand++;
countTimeCommand = 0;
}
if(found == false)
{
Serial.println("Fail");
countTrueCommand = 0;
countTimeCommand = 0;
}

found = false;
